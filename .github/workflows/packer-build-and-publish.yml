name: Packer Build and Publish AMI

on:
  workflow_call:

permissions:
  contents: write
  id-token: write

jobs:
  check-main:
    if: startsWith(github.ref, 'refs/tags/')
    runs-on: ubuntu-latest
    outputs:
      is_main: ${{ steps.is_main.outputs.value }}
    steps:
      - name: Checkout main branch
        uses: actions/checkout@692973e3d937129bcbf40652eb9f2f61becf3332 # v4.1.7
        with:
          ref: main
          persist-credentials: false

      - name: Check if main branch contains the tagged commit
        id: is_main
        env:
          GITHUB_SHA: ${{ github.sha }}
        run: |
          git fetch origin main --depth=$((2**31 - 1)) # Fetch all commits from main
          is_main=$([ -n "$(git branch -r --contains $GITHUB_SHA origin/main)" ] && echo true || echo false)
          echo "value=$is_main" >> "${GITHUB_OUTPUT}"

  check-release:
    runs-on: ubuntu-latest
    outputs:
      release_found: ${{ steps.get_release_by_commit.outputs.release_found }}
      release_id: ${{ steps.get_release_by_commit.outputs.release_id }}
      is_draft: ${{ steps.get_release_by_commit.outputs.is_draft }}
      body: ${{ steps.get_release_by_commit.outputs.body }}
      tag: ${{ steps.get_release_by_commit.outputs.tag }}
    steps:
      - name: Checkout code
        uses: actions/checkout@692973e3d937129bcbf40652eb9f2f61becf3332 # v4.1.7
        with:
          persist-credentials: false

      - name: Find release for the commit
        id: get_release_by_commit
        env:
          GITHUB_TOKEN: ${{ github.token }}
          GITHUB_API_URL: ${{ github.api_url }}
          GITHUB_REPOSITORY: ${{ github.repository }}
          GITHUB_SHA: ${{ github.sha }}
        run: |
          # Fetch last 100 releases (it sorts by latest, last 100 should be enough)
          releases=$(curl -s -H "Authorization: token $GITHUB_TOKEN" \
            "$GITHUB_API_URL/repos/$GITHUB_REPOSITORY/releases?per_page=100")

          # Iterate over each release
          while read -r release; do
            release_id=$(echo "$release" | jq -r '.id')
            tag_name=$(echo "$release" | jq -r '.tag_name')
            is_draft=$(echo "$release" | jq -r '.draft')
            body=$(echo "$release" | jq -r '.body')

            # Get the commit for the tag
            tag_info=$(curl -s -H "Authorization: token $GITHUB_TOKEN" \
              "$GITHUB_API_URL/repos/$GITHUB_REPOSITORY/git/refs/tags/${tag_name}")

            # Handle annotated and lightweight tags
            tag_type=$(echo "$tag_info" | jq -r '.object.type')
            if [ "$tag_type" = "tag" ]; then
              # Annotated tag, get the commit from the tag object
              tag_object=$(curl -s -H "Authorization: token $GITHUB_TOKEN" \
                "$(echo "$tag_info" | jq -r '.object.url')")
              commit_sha=$(echo "$tag_object" | jq -r '.object.sha')
            else
              # Lightweight tag, points directly to the commit
              commit_sha=$(echo "$tag_info" | jq -r '.object.sha')
            fi

            if [ "$commit_sha" = "$GITHUB_SHA" ]; then
              echo "Release found (ID: $release_id)"
              echo "release_found=true" >> $GITHUB_OUTPUT
              echo "release_id=$release_id" >> $GITHUB_OUTPUT
              echo "is_draft=$is_draft" >> $GITHUB_OUTPUT
              echo "tag=$tag_name" >> $GITHUB_OUTPUT
              echo "body<<EOF" >> $GITHUB_OUTPUT
              echo "$body" >> $GITHUB_OUTPUT
              echo "EOF" >> $GITHUB_OUTPUT
              exit 0
            fi
          done < <(echo "$releases" | jq -c '.[]')

          echo "No release found for commit $GITHUB_SHA"
          echo "release_found=false" >> $GITHUB_OUTPUT

  build:
    needs:
      - check-release
    if: needs.check-release.outputs.release_found == 'false'
    runs-on: ubuntu-latest

    env:
      AWS_ACCOUNT: "654654387067"
      AWS_REGION: us-east-2

    strategy:
      fail-fast: false
      matrix:
        template:
          - images/ubuntu/templates/ubuntu-24.04.pkr.hcl
          - images/ubuntu/templates/ubuntu-24.04.arm64.pkr.hcl

    steps:
      - name: Checkout repository
        uses: actions/checkout@692973e3d937129bcbf40652eb9f2f61becf3332 # v4.1.7
        with:
          persist-credentials: false

      - name: Assume OIDC role
        id: auth
        run: |
          AUDIENCE="github-actions-cognito-identity-pool"
          AWS_ACCOUNT_ID="590183704419"
          COGNITO_IDENTITY_POOL_ID="us-east-2:3a4bca79-07af-4921-a9fb-e21475708406"
          JUMP_ROLE_ARN="arn:aws:iam::590183704419:role/github-actions-oidc-jump-role"

          response=$(curl -sLS -H "Authorization: bearer ${ACTIONS_ID_TOKEN_REQUEST_TOKEN}" "${ACTIONS_ID_TOKEN_REQUEST_URL}&audience=${AUDIENCE}")
          ACCESS_TOKEN=$(echo "${response}" | jq -r ".value")

          # job_workflow_ref is not available in the environment, so we need to
          # extract it from the token.
          payload=$(echo "$ACCESS_TOKEN" | cut -d '.' -f 2)
          # Pad the JWT if length would cause issues with base64 decoding.
          payload=$(awk -vstr="$payload" 'BEGIN {l=length(str)+2; print substr(str"==",1,l-l%4)}' | base64 -d | { cat; echo; })

          jobWorkflowRefValue=$(echo "$payload" | jq -r '.job_workflow_ref')
          echo "job_workflow_ref=${jobWorkflowRefValue}" >> "${GITHUB_OUTPUT}"

          repositoryNameValue=$(echo $GITHUB_REPOSITORY | cut -d'/' -f2)
          echo "repository_name=${repositoryNameValue}" >> "${GITHUB_OUTPUT}"

          getIdResponse=$(aws cognito-identity get-id --identity-pool-id "${COGNITO_IDENTITY_POOL_ID}" \
          --account-id "${AWS_ACCOUNT_ID}" \
          --logins '{"token.actions.githubusercontent.com":"'"${ACCESS_TOKEN}"'"}')
          identityId=$(echo "${getIdResponse}" | jq -rc '.IdentityId')

          cognitoIdentityTokenResponse=$(aws cognito-identity get-open-id-token --identity-id "${identityId}" \
          --logins '{"token.actions.githubusercontent.com":"'"${ACCESS_TOKEN}"'"}')
          cognitoIdentityOidcAccessToken=$(echo "${cognitoIdentityTokenResponse}" | jq -r '.Token')

          echo "::add-mask::$cognitoIdentityOidcAccessToken"

          awsCredentials=$(aws sts assume-role-with-web-identity \
            --role-session-name "GitHubActions" \
            --role-arn "${JUMP_ROLE_ARN}" \
            --duration-seconds 18000 \
            --web-identity-token "${cognitoIdentityOidcAccessToken}")

          accessKeyId=$(echo "$awsCredentials" | jq -r ".Credentials.AccessKeyId")
          echo "::add-mask::$accessKeyId"

          secretAccessKey=$(echo "$awsCredentials" | jq -r ".Credentials.SecretAccessKey")
          echo "::add-mask::$secretAccessKey"

          sessionToken=$(echo "$awsCredentials" | jq -r ".Credentials.SessionToken")
          echo "::add-mask::$sessionToken"

          echo "AWS_ACCESS_KEY_ID=${accessKeyId}" >> "${GITHUB_ENV}"
          echo "AWS_SECRET_ACCESS_KEY=${secretAccessKey}" >> "${GITHUB_ENV}"
          echo "AWS_SESSION_TOKEN=${sessionToken}" >> "${GITHUB_ENV}"

          expiration=$(echo "$awsCredentials" | jq -r ".Credentials.Expiration")

          echo "Jump role session expires at: $expiration"

      - name: Set up Packer
        uses: hashicorp/setup-packer@1aa358be5cf73883762b302a3a03abd66e75b232 # v3.1.0

      - name: Packer build
        env:
          GITHUB_REF: ${{ github.ref }}
          GITHUB_JOB_WORKFLOW_REF: ${{ steps.auth.outputs.job_workflow_ref }}
          GITHUB_REPOSITORY_NAME: ${{ steps.auth.outputs.repository_name }}
          TEMPLATE: ${{ matrix.template }}
          REF_NAME: ${{ github.ref_name }}
        run: |
          packer init "$TEMPLATE"
          packer build \
            -var provider=aws \
            -var aws_private_ami=true \
            -var image_version="$REF_NAME" \
            -var aws_assume_role_arn="arn:aws:iam::${{ env.AWS_ACCOUNT }}:role/github-actions/packer-role" \
            -var aws_assume_role_session_name=GitHubActions \
            "$TEMPLATE"

      - name: Preapre artifacts
        id: artifacts
        env:
          TEMPLATE: ${{ matrix.template }}
        run: |
          mkdir -p artifacts
          name=$(basename -s .pkr.hcl $TEMPLATE)
          readme=$(git ls-files --others --exclude-standard -- '**/software-report.md')
          mv "$readme" artifacts/${name}-software-report.md
          report=$(git ls-files --others --exclude-standard -- '**/software-report.json')
          mv "$report" artifacts/${name}-software-report.json
          manifest=$(git ls-files --others --exclude-standard -- '**/build-manifest.json')
          mv "$manifest" artifacts/${name}-build-manifest.json
          echo "name=$name" >> "${GITHUB_OUTPUT}"

      - name: Upload artifacts
        uses: actions/upload-artifact@834a144ee995460fba8ed112a2fc961b36a5ec5a # v4.3.6
        env:
          ARTIFACT_NAME: ${{ steps.artifacts.outputs.name }}
        with:
          name: "Artifacts for ${{ env.ARTIFACT_NAME }}.pkr.hcl"
          path: artifacts

  publish:
    runs-on: ubuntu-latest
    needs:
      - check-main
      - check-release
      - build
    if: ${{ !failure() && !cancelled() }}
    outputs:
      release_id: ${{ steps.publish.outputs.id || needs.check-release.outputs.release_id }}
      prod_release: ${{ env.PROD_RELEASE }}
    env:
      PROD_RELEASE: ${{ needs.check-main.outputs.is_main == 'true' && !contains(github.ref_name, '-') }}
    steps:
      - name: Checkout repository
        uses: actions/checkout@692973e3d937129bcbf40652eb9f2f61becf3332 # v4.1.7
        with:
          persist-credentials: false

      # If no release exists, download artifacts from the build job
      - name: Download artifacts from build job
        if: needs.check-release.outputs.release_found == 'false'
        uses: actions/download-artifact@fa0a91b85d4f404e444e00e005971372dc801d16 # v4.1.8
        with:
          path: artifacts

      - name: Check if latest
        id: is_latest
        env:
          REF_NAME: ${{ github.ref_name }}
        run: |
          # Fetch all tags from the repository
          git fetch --tags

          # Fetch all version tags from the repository
          tags=$(git tag | { grep -E '^v[0-9]+\.[0-9]+\.[0-9]+$' || true; })

          # Sort the tags using semantic versioning and get latest tag
          latest_tag=$(echo "$tags" | sort -V | tail -n 1)

          # Compare the tag_to_check with the latest tag
          if [ "$REF_NAME" = "$latest_tag" ]; then
              echo "value=true" >> "${GITHUB_OUTPUT}"
          else
              echo "value=false" >> "${GITHUB_OUTPUT}"
          fi

      - name: Publish release
        id: publish
        if: needs.check-release.outputs.release_found == 'false'
        uses: softprops/action-gh-release@c062e08bd532815e2082a85e87e3ef29c3e6d191 # v2.0.8
        env:
          REF_NAME: ${{ github.ref_name }}
          GITHUB_RUN_ID: ${{ github.run_id }}
          GITHUB_SERVER_URL: ${{ github.server_url }}
          GITHUB_REPOSITORY: ${{ github.repository }}
          IS_LATEST: ${{ steps.is_latest.outputs.value }}
        with:
          files: artifacts/**/*
          body: |
            Release ${{ env.REF_NAME }} from workflow [#${{ env.GITHUB_RUN_ID }}](${{ env.GITHUB_SERVER_URL }}/${{ env.GITHUB_REPOSITORY }}/actions/runs/${{ env.GITHUB_RUN_ID }})
          draft: ${{ env.PROD_RELEASE == 'false' }}
          make_latest: ${{ env.PROD_RELEASE == 'true' && steps.is_latest.outputs.value }}
          generate_release_notes: true

      - name: Update release
        id: update_release
        if: needs.check-release.outputs.release_found == 'true' && needs.check-release.outputs.is_draft == 'true'
        env:
          RELEASE_BODY: ${{ needs.check-release.outputs.body }}
          RELEASE_TAG: ${{ needs.check-release.outputs.tag }}
          GITHUB_TOKEN: ${{ github.token }}
          GITHUB_API_URL: ${{ github.api_url }}
          GITHUB_REPOSITORY: ${{ github.repository }}
          REF_NAME: ${{ github.ref_name }}
          RELEASE_ID: ${{ needs.check-release.outputs.release_id }}
          PROD_RELEASE: ${{ env.PROD_RELEASE }}
          IS_LATEST: ${{ steps.is_latest.outputs.value }}
          DRAFT_STATUS: ${{ env.PROD_RELEASE == 'false' }}
          MAKE_LATEST: ${{ env.PROD_RELEASE == 'true' && steps.is_latest.outputs.value }}
        run: |
          curl -X PATCH \
            -H "Accept: application/vnd.github+json" \
            -H "Authorization: token $GITHUB_TOKEN" \
            $GITHUB_API_URL/repos/$GITHUB_REPOSITORY/releases/$RELEASE_ID \
            -d "$(jq -n \
              --arg name "$REF_NAME" \
              --arg tag_name "$REF_NAME" \
              --argjson draft $DRAFT_STATUS \
              --arg make_latest "$MAKE_LATEST" \
              --arg body "$(echo "$RELEASE_BODY" | sed "/Release .* from workflow/ s/$RELEASE_TAG/$REF_NAME/g; /Full Changelog/ s/$RELEASE_TAG/$REF_NAME/g")" \
              '{name: $name, tag_name: $tag_name, draft: $draft, make_latest: $make_latest, body: $body}' \
            )"

  share-and-copy-amis:
    needs:
      - publish
    if: ${{ !failure() && !cancelled() && needs.publish.outputs.prod_release == 'true' }}
    runs-on: ubuntu-latest

    env:
      DEV_ACCOUNT: "654654387067"
      PROD_ACCOUNT: "590183878691"
      AWS_REGION: us-east-2

    steps:
      - name: Checkout code
        uses: actions/checkout@692973e3d937129bcbf40652eb9f2f61becf3332 # v4.1.7
        with:
          persist-credentials: false

      - name: Download manifest assets
        env:
          GITHUB_TOKEN: ${{ github.token }}
          GITHUB_API_URL: ${{ github.api_url }}
          GITHUB_REPOSITORY: ${{ github.repository }}
          RELEASE_ID: ${{ needs.publish.outputs.release_id }}
        run: |
          # Get the list of assets for the specified release
          assets=$(curl -s -H "Authorization: token $GITHUB_TOKEN" \
            "$GITHUB_API_URL/repos/$GITHUB_REPOSITORY/releases/$RELEASE_ID/assets")

          # Filter assets matching the pattern and download each one
          echo "$assets" | jq -r '.[] | select(.name | test(".*build-manifest\\.json$")) | "\(.id) \(.name)"' | while read -r asset_id asset_name; do
            echo "Downloading $asset_name (ID: $asset_id)"
            curl -L -H "Accept: application/octet-stream" \
              -H "Authorization: token $GITHUB_TOKEN" \
              "$GITHUB_API_URL/repos/$GITHUB_REPOSITORY/releases/assets/${asset_id}" \
              -o "${asset_name}"
          done

      - name: Authenticate with Dev AWS Account
        uses: grafana/shared-workflows/actions/aws-auth@abb283a39f2ddc434391d0e5d9a994f74bf20e35 # aws-auth-v1.0.1
        with:
          aws-region: "us-east-2"
          role-arn: "arn:aws:iam::${{ env.DEV_ACCOUNT }}:role/github-actions/packer-role"
          set-creds-in-environment: true

      - name: Share AMIs with Prod Account
        run: |
          PROD_ACCOUNT_ID="${{ env.PROD_ACCOUNT }}"
          for file in *build-manifest.json; do
            echo "Processing $file for sharing"
            builds_length=$(jq '.builds | length' "$file")
            for ((i=0; i<$builds_length; i++)); do
              artifact_id=$(jq -r ".builds[$i].artifact_id" "$file")
              IFS=',' read -ra AMI_LIST <<< "$artifact_id"
              for AMI_PAIR in "${AMI_LIST[@]}"; do
                REGION=$(echo $AMI_PAIR | cut -d: -f1)
                AMI_ID=$(echo $AMI_PAIR | cut -d: -f2)
                echo "Sharing AMI $AMI_ID in region $REGION with account $PROD_ACCOUNT_ID"
                aws ec2 modify-image-attribute --image-id $AMI_ID --region $REGION --launch-permission "Add=[{UserId=$PROD_ACCOUNT_ID}]"

                # Retrieve the snapshot IDs associated with the AMI
                SNAPSHOT_IDS=$(aws ec2 describe-images --image-ids $AMI_ID --region $REGION --query 'Images[].BlockDeviceMappings[].Ebs.SnapshotId' --output text)

                # Share each snapshot with the Prod account
                for SNAPSHOT_ID in $SNAPSHOT_IDS; do
                  echo "Sharing snapshot $SNAPSHOT_ID with account $PROD_ACCOUNT_ID"
                  aws ec2 modify-snapshot-attribute --snapshot-id $SNAPSHOT_ID --region $REGION --attribute createVolumePermission --operation-type add --user-ids $PROD_ACCOUNT_ID
                done
              done
            done
          done

      - name: Authenticate with Prod AWS Account
        uses: grafana/shared-workflows/actions/aws-auth@abb283a39f2ddc434391d0e5d9a994f74bf20e35 # aws-auth-v1.0.1
        with:
          aws-region: "us-east-2"
          role-arn: "arn:aws:iam::${{ env.PROD_ACCOUNT }}:role/github-actions/packer-role"
          set-creds-in-environment: true

      - name: Copy AMIs to Prod Account
        run: |
          for file in *build-manifest.json; do
            echo "Processing $file for copying"
            builds_length=$(jq '.builds | length' "$file")
            for ((i=0; i<$builds_length; i++)); do
              artifact_id=$(jq -r ".builds[$i].artifact_id" "$file")
              image_name=$(jq -r ".builds[$i].custom_data.image_name" "$file")
              IFS=',' read -ra AMI_LIST <<< "$artifact_id"
              for AMI_PAIR in "${AMI_LIST[@]}"; do
                REGION=$(echo $AMI_PAIR | cut -d: -f1)
                AMI_ID=$(echo $AMI_PAIR | cut -d: -f2)
                echo "Copying AMI $AMI_ID from region $REGION with name $image_name"
                NEW_AMI_ID=$(aws ec2 copy-image --source-region $REGION --source-image-id $AMI_ID --region $REGION --name "$image_name" --description "Copied from $AMI_ID in $REGION" --query 'ImageId' --output text)
                echo "New AMI ID in prod account: $NEW_AMI_ID"
              done
            done
          done
